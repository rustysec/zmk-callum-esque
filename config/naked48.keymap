/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define             BASE    0
#define             NAV     1
#define             NUM     2
#define             FUN     3

#define VOL_U       &kp C_VOL_UP
#define VOL_D       &kp C_VOL_DN
#define PB          &kp PAUSE_BREAK

#define BT0         &bt BT_SEL 0
#define BT1         &bt BT_SEL 1
#define BT2         &bt BT_SEL 2
#define BT3         &bt BT_SEL 3

&kscan0 {
    debounce-press-ms = <12>;
    debounce-release-ms = <12>;
};

&mt {
    tapping-term-ms = <185>;
    quick-tap-ms = <185>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <185>;
    quick-tap-ms = <185>;
};

&sl {
    quick-release;
};


&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ { 
        combos {
            compatible = "zmk,combos";

            combo_esc {
                timeout-ms = <30>;
                key-positions = <14 15>;
                bindings = <&kp ESC>;
                layers = <NAV NUM>;
            };

            combo_esc_base {
                timeout-ms = <30>;
                key-positions = <14 26>;
                bindings = <&kp ESC>;
                layers = <BASE>;
            };

            combo_tab {
                timeout-ms = <30>;
                key-positions = <15 16>;
                bindings = <&kp TAB>;
                layers = <NUM>;
            };

            combo_tab_base {
                timeout-ms = <30>;
                key-positions = <16 28>;
                bindings = <&kp TAB>;
                layers = <BASE>;
            };

            combo_ret {
                timeout-ms = <30>;
                key-positions = <20 21>;
                bindings = <&kp RET>;
                layers = <NAV NUM>;
            };

            combo_ret_base {
                timeout-ms = <30>;
                key-positions = <16 26>;
                bindings = <&kp RET>;
                layers = <BASE>;
            };

            combo_caps_word {
                timeout-ms = <50>;
                key-positions = <5 17>;
                bindings = <&caps_word>;
                layers = <NUM>;
            };

            // layer combos
            combo_fun {
                timeout-ms = <50>;
                key-positions = <39 44>;
                bindings = <&mo FUN>;
                layers = <BASE>;
            };

            // layer combos
            combo_home {
                timeout-ms = <50>;
                key-positions = <25 26>;
                bindings = <&kp HOME>;
                layers = <NAV NUM>;
            };

            // layer combos
            combo_end {
                timeout-ms = <50>;
                key-positions = <26 27>;
                bindings = <&kp END>;
                layers = <NAV NUM>;
            };

        };

        keymap {
            compatible = "zmk,keymap";

            default_layer {
            bindings = <
                &none   &kp Q       &kp W       &kp F       &kp P       &kp G       /**/        /**/    &kp J       &kp L       &kp U       &kp Y       &kp SQT     &none
                &none   &kp A       &kp R       &kp S       &kp T       &kp D       /**/        /**/    &kp H       &kp N       &kp E       &kp I       &kp O       &none
                &none   &kp Z       &kp X       &kp C       &kp V       &kp B       /**/        /**/    &kp K       &kp M       &kp COMMA   &kp DOT     &kp SLASH   &none
                        &none       &none       &none       &mo NAV     &kp BSPC    &none       &none   &kp SPC     &mo NUM     &none       &none       &none
            >;
            };

            nav {
            bindings = <
                &none   &kp DEL     &none       &none       &none       &none       /**/        /**/    &kp C_PP    VOL_D       VOL_U       &kp C_PREV  &trans      &none
                &none   &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none       /**/        /**/    &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp DEL     &none
                &none   &none       &none       &none       &none       &none       /**/        /**/    &none       &kp HOME    &kp END     &none       &none       &none
                        &none       &none       &none       &none       &none       &none       &none   &none       &none       &none       &none       &none
            >;
            };

            num {
            bindings = <
                &none   &kp LBKT    &kp N7      &kp N8      &kp N9      &kp RBKT    /**/        /**/  	&kp LBRC    &kp LPAR    &kp RPAR    &kp RBRC    &trans      &none
                &none   &kp SEMI    &kp N4      &kp N5      &kp N6      &kp EQUAL   /**/        /**/    &none       &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI    &none
                &none   &kp GRAVE   &kp N1      &kp N2      &kp N3      &kp BSLH    /**/        /**/    &none       &none       &none       &kp DOT     &none       &none
                        &none       &none       &none       &kp N0      &kp MINUS   &none       &none   &none       &none       &none       &none       &none
            >;
            };	

            fun {
            bindings = <
                &none   &kp F12     &kp F7      &kp F8      &kp F9      &kp PSCRN   /**/        /**/    &none       &none       &none       &none       &bootloader &none
                &none   &kp F11     &kp F4      &kp F5      &kp F6      &kp SLCK    /**/        /**/    &none       &kp RSHFT   &kp RCTRL   &kp RALT    &kp RGUI    &none
                &none   &kp F10     &kp F1      &kp F2      &kp F3      PB          /**/        /**/    &bt BT_CLR  BT0         BT1         BT2         BT3         &none
                        &none       &none       &none       &none       &none       &none       &none   &none       &none       &none       &none       &none
            >;
            };

    };
};
