/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define             BASE    0
#define             NAV     1
#define             NUM     2
#define             FUN     3

#define VOL_U       &kp C_VOL_UP
#define VOL_D       &kp C_VOL_DN
#define PB          &kp PAUSE_BREAK

#define BT0         &bt BT_SEL 0
#define BT1         &bt BT_SEL 1
#define BT2         &bt BT_SEL 2
#define BT3         &bt BT_SEL 3

#define SK(KEY)     &nk KEY KEY

&kscan0 {
    debounce-period  = <12>;
};

&sk {
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {
        combos {
            compatible = "zmk,combos";

            combo_esc_num {
                timeout-ms = <30>;
                key-positions = <11 12>;
                bindings = <&kp ESC>;
                layers = <NUM NAV>;
            };

            combo_esc {
                timeout-ms = <30>;
                key-positions = <12 21>;
                bindings = <&kp ESC>;
                layers = <BASE>;
            };

            combo_tab_num {
                timeout-ms = <30>;
                key-positions = <12 13>;
                bindings = <&kp TAB>;
                layers = <NUM NAV>;
            };

            combo_tab {
                timeout-ms = <30>;
                key-positions = <13 22>;
                bindings = <&kp TAB>;
                layers = <BASE>;
            };

            combo_ret {
                timeout-ms = <30>;
                key-positions = <17 18>;
                bindings = <&kp RET>;
                layers = <NAV NUM FUN>;
            };

            combo_ret_base {
                timeout-ms = <30>;
                key-positions = <16 23>;
                bindings = <&kp RET>;
                layers = <BASE>;
            };

            combo_caps_word {
                timeout-ms = <30>;
                key-positions = <4 14>;
                bindings = <&caps_word>;
                layers = <NUM>;
            };

            // layer combos
            combo_fun {
                timeout-ms = <30>;
                key-positions = <28 29>;
                bindings = <&mo FUN>;
                layers = <BASE>;
            };

            // letter/symbols
            combo_k {
                timeout-ms = <30>;
                key-positions = <23 24>;
                bindings = <&kp K>;
                layers = <BASE>;
                slow-release;
            };
            combo_bt_clr {
                timeout-ms = <30>;
                key-positions = <23 24>;
                bindings = <&bt BT_CLR>;
                layers = <NAV>;
            };

            // q position
            combo_q {
                timeout-ms = <30>;
                key-positions = <20 21>;
                bindings = <&kp Q>;
                layers = <BASE>;
            };
            combo_lbkt {
                timeout-ms = <30>;
                key-positions = <1 2>;
                bindings = <&kp LBKT>;
                layers = <NUM>;
            };
            combo_f12 {
                timeout-ms = <30>;
                key-positions = <20 21>;
                bindings = <&kp F12>;
                layers = <FUN>;
            };

            // single quote position combos
            combo_sqt {
                timeout-ms = <30>;
                key-positions = <24 25>;
                bindings = <&kp SQT>;
                layers = <BASE>;
            };
            combo_bt3 {
                timeout-ms = <30>;
                key-positions = <24 25>;
                bindings = <&bt BT_SEL 3>;
                layers = <NAV>;
            };

            // B position combos
            combo_b {
                timeout-ms = <30>;
                key-positions = <21 22>;
                bindings = <&kp B>;
                layers = <BASE>;
            };
            combo_b_bslh {
                timeout-ms = <30>;
                key-positions = <21 22>;
                bindings = <&kp BSLH>;
                layers = <NUM>;
            };
            combo_b_pause_break {
                timeout-ms = <30>;
                key-positions = <21 22>;
                bindings = <&kp PAUSE_BREAK>;
                layers = <FUN>;
            };
        };

        behaviors {

            // https://github.com/dxmh/zmk-config
            // Sticky key on tap, normal key on hold
            // Useful for modifier-clicking without the modifier remaining active
            nk: not_so_sticky_key {
                compatible = "zmk,behavior-hold-tap";
                label = "NOT_SO_STICKY_KEY";
                #binding-cells = <2>;
                tapping_term_ms = <200>;
                flavor = "hold-preferred";
                bindings = <&kp>, <&sk>;
            };
        };

        keymap {
            compatible = "zmk,keymap";

            default_layer {
                bindings = <
                    &kp A       &kp W       &kp F       &kp P       &kp G       /**/ /**/       &kp J       &kp L       &kp U       &kp Y       &kp O
                    &kp Z       &kp R       &kp S       &kp T       &kp D       /**/ /**/       &kp H       &kp N       &kp E       &kp I       &kp SLASH
                                &kp X       &kp C       &kp V       /*b*/       /**/ /**/       /*k*/       &kp M       &kp COMMA   &kp DOT
                                                        &mo NAV     &kp BSPC                    &kp SPC     &mo NUM
                >;
                };

                nav {
                bindings = <
                    SK(LGUI)    &none       &none       &none       &none       /**/ /**/       &kp C_PP    VOL_D       VOL_U       &kp C_PREV  &kp DEL
                    &none       SK(LALT)    SK(LCTRL)   SK(LSHFT)   &none       /**/ /**/       &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   BT3
                                &none       &none       &none                   /**/ /**/       /*BTCLR*/   BT0         BT1         BT2
                                                        &none       &none                       &none       &none
                >;
                };

                num {
                bindings = <
                    &kp SEMI    &kp N7      &kp N8      &kp N9      &kp RBKT    /**/ /**/       &kp LBRC    &kp LPAR    &kp RPAR    &kp RBRC    SK(RGUI)
                    &kp GRAVE   &kp N4      &kp N5      &kp N6      &kp EQUAL   /**/ /**/       &none       SK(RSHFT)   SK(RCTRL)   SK(RALT)    &kp SLASH
                                &kp N1      &kp N2      &kp N3      /*BSLH*/    /**/ /**/                   &kp HOME    &kp END     &kp DOT
                                                        &kp N0      &kp MINUS                   &none       &none
                >;
                };	

                fun {
                bindings = <
                    &kp F10     &kp F7      &kp F8      &kp F9      &kp PSCRN   /**/ /**/       &none       &none       &none       &none       SK(RGUI)
                    &kp F11     &kp F4      &kp F5      &kp F6      &kp SLCK    /**/ /**/       &none       SK(RSHFT)   SK(RCTRL)   SK(RALT)    &none
                                &kp F1      &kp F2      &kp F3      /*PB*/      /**/ /**/                   &none       &none       &none
                                                        &none       &none                       &none       &none
                >;
                };

            };
};
