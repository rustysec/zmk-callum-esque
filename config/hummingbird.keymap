/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define             _BASE    0
#define             _NAV     1
#define             _MEDIA   2
#define             _NUM     3
#define             _SYM     4
#define             _FUN     5

#define VOL_U       &kp C_VOL_UP
#define VOL_D       &kp C_VOL_DN
#define PB          &kp PAUSE_BREAK

#define BT0         &bt BT_SEL 0
#define BT1         &bt BT_SEL 1
#define BT2         &bt BT_SEL 2
#define BT3         &bt BT_SEL 3

#define SK(KEY)     &nk KEY KEY

&kscan0 {
    debounce-period  = <12>;
};

&mt {
    tapping-term-ms = <185>;
    quick-tap-ms = <185>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <185>;
    quick-tap-ms = <185>;
};

&sk {
    quick-release;
};


&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ { 
        combos {
            compatible = "zmk,combos";

            combo_esc {
                timeout-ms = <30>;
                key-positions = <11 12>;
                bindings = <&kp ESC>;
                layers = <0>;
            };

            combo_tab {
                timeout-ms = <30>;
                key-positions = <12 13>;
                bindings = <&kp TAB>;
                layers = <0>;
            };

            combo_ret {
                timeout-ms = <30>;
                key-positions = <17 18>;
                bindings = <&kp RET>;
                layers = <0 1 2 3 4 5>;
            };
            
            combo_caps_word {
                timeout-ms = <50>;
                key-positions = <4 14>;
                bindings = <&caps_word>;
                layers = <0>;
            };
            
            // layer combos
            combo_media {
                timeout-ms = <50>;
                key-positions = <26 27>;
                bindings = <&mo _MEDIA>;
                layers = <0>;
            };
            combo_sym {
                timeout-ms = <50>;
                key-positions = <28 29>;
                bindings = <&mo _SYM>;
                layers = <0>;
            };
            combo_fun {
                timeout-ms = <50>;
                key-positions = <23 28>;
                bindings = <&mo _FUN>;
                layers = <0>;
            };
            
            // letter/symbols
            combo_k {
                timeout-ms = <50>;
                key-positions = <23 24>;
                bindings = <&kp K>;
                layers = <0>;
                slow-release;
            };

            // z position
            combo_z {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp Z>;
                layers = <0>;
            };
            combo_grave {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp GRAVE>;
                layers = <3>;
            };
            combo_tilde {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp TILDE>;
                layers = <4>;
            };
            combo_f10 {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp F10>;
                layers = <5>;
            };
            
            // Slash position combos
            combo_slash {
                timeout-ms = <50>;
                key-positions = <24 25>;
                bindings = <&kp SLASH>;
                layers = <0 1>;
            };
            combo_bt3 {
                timeout-ms = <50>;
                key-positions = <24 25>;
                bindings = <&bt BT_SEL 3>;
                layers = <2>;
            };

            // B position combos
            combo_b {
                timeout-ms = <50>;
                key-positions = <21 22>;
                bindings = <&kp B>;
                layers = <0>;
            };
            combo_b_bslh {
                timeout-ms = <50>;
                key-positions = <21 22>;
                bindings = <&kp BSLH>;
                layers = <3>;
            };
            combo_b_pipe {
                timeout-ms = <50>;
                key-positions = <21 22>;
                bindings = <&kp PIPE>;
                layers = <4>;
            };
            combo_b_pause_break {
                timeout-ms = <50>;
                key-positions = <21 22>;
                bindings = <&kp PAUSE_BREAK>;
            };
        };
    
        behaviors {
        
            // https://github.com/dxmh/zmk-config
            // Sticky key on tap, normal key on hold
            // Useful for modifier-clicking without the modifier remaining active
            nk: not_so_sticky_key {
              compatible = "zmk,behavior-hold-tap";
              label = "NOT_SO_STICKY_KEY";
              #binding-cells = <2>;
              tapping_term_ms = <200>;
              flavor = "tap-preferred";
              bindings = <&kp>, <&sk>;
            };
        };

        keymap {
            compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
            &kp Q       &kp W       &kp F       &kp P       &kp G       /**/ /**/       &kp J       &kp L       &kp U       &kp Y       &kp SQT
            &kp A       &kp R       &kp S       &kp T       &kp D 	    /**/ /**/	    &kp H       &kp N       &kp E       &kp I       &kp O
            /*z*/       &kp X       &kp C       &kp V       /*b*/       /**/ /**/       /*k*/       &kp M       &kp COMMA   &kp DOT     /*SLASH*/
                                                &mo _NAV  &kp BSPC                      &kp SPC     &mo _NUM
		>;
		};

       		nav {
		bindings = <
            &none       &none       &none       &none       &none       /**/ /**/       &none       &none       &none       &none       &kp CAPS
            SK(LGUI)    SK(LALT)    SK(LCTRL)   SK(LSHFT)   &none       /**/ /**/       &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &none
                        &none       &none       &none                   /**/ /**/                   &none       &trans      &none       /*SLASH*/
                                                &none       &none                       &none       &none
		>;
		};
		
            media {
		bindings = <
            &none       &none       &none       &none       &none       /**/ /**/  	    &none       &none       &none       &none       &none  
            SK(LGUI)    SK(LALT)    SK(LCTRL)   SK(LSHFT)   &none       /**/ /**/       &kp C_PP    VOL_D       VOL_U       &kp C_PREV  &none
                        &none       &none       &none                   /**/ /**/                   BT0         BT1         BT2         /*BT3*/
                                                &none       &none                       &none       &none
		>;
		};	
		
            num {
		bindings = <
            &kp LBKT    &kp N7      &kp N8      &kp N9      &kp RBKT    /**/ /**/  	    &none       &none       &none       &none       &none 
            &kp SEMI    &kp N4      &kp N5      &kp N6      &kp EQUAL   /**/ /**/       &none       SK(RSHFT)   SK(RCTRL)   SK(RALT)    SK(RGUI)
            /*`*/       &kp N1      &kp N2      &kp N3      /*BSLH*/    /**/ /**/                   &none       &kp DOT     &kp MINUS
                                                &kp N0      &kp MINUS                   &none       &none
		>;
		};	
		
            sym {
		bindings = <
            &kp LBRC    &kp AMPS    &kp STAR    &kp LPAR    &kp RBRC    /**/ /**/       &kp RPAR    &kp LPAR    &kp RPAR    &none       &none 
            &kp COLON   &kp DLLR    &kp PERCENT &kp CARET   &kp PLUS    /**/ /**/       &none       SK(RSHFT)   SK(RCTRL)   SK(RALT)    SK(RGUI)
            /*~*/       &kp EXCL    &kp AT      &kp HASH    /*PIPE*/    /**/ /**/       &none       &kp UNDER   &none
                                                &kp RPAR    &kp UNDER                   &none       &none
		>;
		};	

            fun {
		bindings = <
            &kp F12     &kp F7      &kp F8      &kp F9      &kp PSCRN   /**/ /**/	    &none       &none       &none       &none       &bootloader 
            &kp F11     &kp F4      &kp F5      &kp F6      &kp SLCK    /**/ /**/       &none       SK(RSHFT)   SK(RCTRL)   SK(RALT)    SK(RGUI)
            /*F10*/     &kp F1      &kp F2      &kp F3      /*PB*/      /**/ /**/                   &none       &none       &none
                                                &none       &none                       &none       &none
		>;
		};	
		
	};
};
